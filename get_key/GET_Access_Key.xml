<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f63fcb17-4da0-4c43-a1d3-daf699514a45" activeEnvironment="Default" name="获取access_key_2" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="d5023e2f-2462-44a0-8f87-677cacfa62ef" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://passport.bilibili.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://account.bilibili.com</con:endpoint></con:endpoints><con:resource name="获取token" path="/api/oauth/getTmpToken" id="a4fc39bb-5a4f-4924-b225-94a3437387ff"><con:settings/><con:parameters><con:parameter><con:name>access_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>app_subid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>target_appkey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appkey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>sign</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ts</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>callback</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="token" id="310601ca-8806-4a05-9719-a06395aa479f" method="GET"><con:settings/><con:parameters/><con:request name="Request" id="d92f0508-3e71-440f-bfa1-af3194a2e0b6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://account.bilibili.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>access_key</con:entry><con:entry>app_subid</con:entry><con:entry>target_appkey</con:entry><con:entry>appkey</con:entry><con:entry>sign</con:entry><con:entry>type</con:entry><con:entry>ts</con:entry><con:entry>callback</con:entry><con:entry>platform</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="登录" path="/api/login/v2" id="d1b9fa8f-aebe-43cc-88cc-96c49afa8f42"><con:settings/><con:parameters><con:parameter><con:name>userid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>mode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>captcha</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>pwd</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>app_subid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>permission</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appkey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>sign</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ts</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>callback</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>access_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="login" id="e1499ec1-903d-4e06-ac3d-9f3d6c14cd87" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v2="https://account.bilibili.com/api/login/v2">v2:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v2="https://account.bilibili.com/api/login/v2">v2:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v2="https://account.bilibili.com/api/login/v2">v2:Response</con:element></con:representation><con:request name="Request" id="99eaf0e6-e1d0-40e0-9f4b-58cb63c8930e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://passport.bilibili.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>userid</con:entry><con:entry>mode</con:entry><con:entry>captcha</con:entry><con:entry>pwd</con:entry><con:entry>app_subid</con:entry><con:entry>permission</con:entry><con:entry>appkey</con:entry><con:entry>sign</con:entry><con:entry>type</con:entry><con:entry>ts</con:entry><con:entry>callback</con:entry><con:entry>access_key</con:entry><con:entry>platform</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="获取密钥" path="/api/login/get_key" id="dae86b58-5e7e-4e15-8171-5530d181e929"><con:settings/><con:parameters><con:parameter><con:name>appkey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>sign</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ts</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>season_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getkey" id="95eba902-f5b4-4345-8d1d-862ff28fd7bb" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://account.bilibili.com/api/login/get_key">get:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://account.bilibili.com/api/login/get_key">get:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="e2cb9a0e-7b7e-4ee2-ae86-a2f92f356661" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://passport.bilibili.com</con:endpoint><con:request/><con:originalUri>https://account.bilibili.com/api/login/get_key</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>appkey</con:entry><con:entry>sign</con:entry><con:entry>ts</con:entry><con:entry>season_id</con:entry><con:entry>type</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="bc22b16c-f9f1-4f54-b9d7-a6caa87bed14" name="common_testsuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e3e4906b-683b-4460-8105-c86c0e9d5de1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="loginv2" searchProperties="true"><con:settings/><con:testStep type="groovy" name="assign" id="4f2428b4-02f1-42f8-8c59-d70271e44ed9"><con:settings/><con:config><script><![CDATA[import java.util.*
import java.security.MessageDigest
import java.net.URLEncoder
import rsa.App;

import com.eviware.soapui.support.types.StringToObjectMap
import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport
import org.apache.http.impl.cookie.BasicClientCookie
import com.eviware.soapui.support.types.StringToStringMap

//计算时间戳
Date date = new Date()
def st_string = date.getTime()
st_string = st_string.toString()
st_string = st_string.substring(0,10)
//设置ts的时间戳 预先写入供后面的调用

testRunner.testCase.testSteps["testdata"].setPropertyValue('ts',st_string)

//===========================需要手工参与的地方=======================================
//1.设置data_list

//设置预读取的testdata里除sign以外的参数名字，用于计算md5
//def data_list = ['ts','appkey']

//测试专用的appkey
def appkey_str = '7d9f6f6fe2a898e8'
//测试专用appkey对应的appsecret
def appsecret_str = '4de2ccdbd9db69be0c2c6437bfe6eb69'

def params_list = []
log.info("获取秘钥")
//调用的case
def testcase_name = 'getkey'
def teststep_name = 'getkey'
//执行用例
def re = getContentOut(testcase_name,teststep_name,params_list)
//打印结果中的hash
log.info re
def a = re.key
def b = a.split('-----')[2]
log.info(b)
//login  4780461

def pwd_string = testRunner.testCase.testSteps["testdata"].getPropertyValue('pwd')
//字符串拼接
//def rsa_string = re.hash+pwd_string
def rsa_string = re.hash+pwd_string
//RSA加密
String publicKey = b;
String arg = rsa_string;
log.info rsa_string
App app = new App();
app.loadPublicKey(publicKey);
String encode = app.encrypt(app.getPublicKey(),arg);
log.info encode
//params_list1 = ['userid=nixuepeng','pwd='+encode]
testRunner.testCase.testSteps["testdata"].setPropertyValue('pwd',encode)

def data_list = ['ts','appkey','pwd','userid','mode','captcha','app_subid','app_subid','permission','type','callback','access_key','platform']

//排序
data_list = data_list.sort()


def n = 0
def sg_orgin_string = ''
def sg_md5_string = ''


//拼接字符串
while (n<data_list.size()){
	def getLocalPropValue = ''
	if(data_list[n] == 'appkey'){
		sg_orgin_string = sg_orgin_string + data_list[n] + '=' + java.net.URLEncoder.encode(appkey_str,'UTF-8') + '&' 
	}else{
		if( testRunner.testCase.testSteps["testdata"].getPropertyValue(data_list[n]) == ''){
			log.info('null')
		}else{
			getLocalPropValue = testRunner.testCase.testSteps["testdata"].getPropertyValue(data_list[n])
			sg_orgin_string = sg_orgin_string + data_list[n] + '=' + java.net.URLEncoder.encode(getLocalPropValue,'UTF-8') + '&'
		}
	}
	n = n + 1
}

def orgin_len = sg_orgin_string.size()
sg_orgin_string = sg_orgin_string[0..(orgin_len-2)]
//还原空格设置
sg_orgin_string = sg_orgin_string.replace('$',' ')

sg_orgin_string =  sg_orgin_string + appsecret_str
sg_md5_string = getMD5(sg_orgin_string)

log.info sg_orgin_string
log.info sg_md5_string

//把算出来的sign写入testdata
testRunner.testCase.testSteps["testdata"].setPropertyValue('sign',sg_md5_string)
//设置appkey
testRunner.testCase.testSteps["testdata"].setPropertyValue('appkey',appkey_str)
log.info(sg_md5_string)



//获取签名
def String getSign(TreeMap<String, String> paramsTreeMap, String appSecret) throws UnsupportedEncodingException {
   String signCalc = "";
   for (Map.Entry<String, String> entry : paramsTreeMap.entrySet()) {
       String key = entry.getKey(); // map中的key
       String value = "";
       value = String.valueOf(entry.getValue());
       signCalc = String.format("%s%s=%s&", signCalc, key, encodedFix(URLEncoder.encode(value, "UTF-8")), "&");
       log.info(signCalc)
   }
   if (signCalc.length() > 0) {
       signCalc = signCalc.substring(0, signCalc.length() - 1);
   }
   log.info(String.format("%s%s", signCalc, appSecret))
   signCalc = getMD5(String.format("%s%s", signCalc, appSecret));
   return signCalc;
}

    
def encodedFix(String encoded) {
   // required
   encoded = encoded.replace("+", "%20");
   encoded = encoded.replace("*", "%2A");
   encoded = encoded.replace("%7E", "~");
   encoded = encoded.replace("%2B", "%20");
	
   // optional
   encoded = encoded.replace("!", "%21");
   encoded = encoded.replace("(", "%28");
   encoded = encoded.replace(")", "%29");
   encoded = encoded.replace("'", "%27");
   return encoded;
}

//MD5算法
def getMD5(String source){
	MessageDigest md5 = MessageDigest.getInstance("MD5")
	md5.update(source.getBytes())
	byte[] digest = md5.digest()
	StringBuffer sb = new StringBuffer()
	digest.eachByte {
		 sb.append(String.format("%02x", it & 0xff)) 
	}
	return sb.toString()
}


//==============================================
//模拟请求
def getContentOut(String testcase_name,String teststep_name,List request_params){
	//找对应的case
	def testproject = testRunner.testCase.testSuite.project
	def testcase = testproject.testSuites['common_testsuite'].testCases[testcase_name]
	
	for(i in request_params){
		if(i.split('=')[0] == 'pwd'){
			i = i.substring(4)
			testcase.testSteps['testdata'].setPropertyValue('pwd',i)
		}else{
			testcase.testSteps['testdata'].setPropertyValue(i.split('=')[0],i.split('=')[1])
		}
	}

	def contextMap = new StringToObjectMap(context)
	def runner = testcase.run(contextMap,false)
	//获取测试的请求
	def testcase_stepcount = testcase.getTestStepCount() 
	def response_content = runner.getResults()[testcase_stepcount-1].getResponseContent()
	
     //还原设置参数
	tearDownInput(testcase_name,request_params)

	//还原cookie设置
	setCookies(testcase_name, teststep_name,'teardown')

     //把测试结果json化后传出去
	def slurper = new JsonSlurper()
	def re = slurper.parseText(response_content)
	
	return re
}
//清理数据
def tearDownInput(String testcase_name,List request_params){
	for(i in request_params){
		testRunner.testCase.testSuite.project.testSuites['common_testsuite'].testCases[testcase_name].testSteps['testdata'].setPropertyValue(i.split('=')[0],'')
		}
}
//设置coockies
def setCookies(String testcase_name,String teststep_name,String userid){
	//按用户名读取预置的cookie值
	def testproject = testRunner.testCase.testSuite.project
	def cookies_str = testproject.testSuites['common_testsuite'].testCases['cookie'].testSteps['user_cookie'].getPropertyValue(userid)
	def reqheaders = new StringToStringMap()
	reqheaders.put('Cookie',cookies_str)
	testproject.testSuites['common_testsuite'].getTestCaseByName(testcase_name).getTestStepByName(teststep_name).testRequest.setRequestHeaders(reqheaders)	
}]]></script></con:config></con:testStep><con:testStep type="properties" name="testdata" id="8f2aa9f6-61a2-405a-b5ba-82f85b066eef"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>userid</con:name><con:value/></con:property><con:property><con:name>mode</con:name><con:value/></con:property><con:property><con:name>captcha</con:name><con:value/></con:property><con:property><con:name>pwd</con:name><con:value/></con:property><con:property><con:name>app_subid</con:name><con:value/></con:property><con:property><con:name>permission</con:name><con:value/></con:property><con:property><con:name>appkey</con:name><con:value>7d9f6f6fe2a898e8</con:value></con:property><con:property><con:name>sign</con:name><con:value>fb215ead0d5251c62aa29ffb04d36d1a</con:value></con:property><con:property><con:name>type</con:name><con:value/></con:property><con:property><con:name>ts</con:name><con:value>1473969343</con:value></con:property><con:property><con:name>callback</con:name><con:value/></con:property><con:property><con:name>access_key</con:name><con:value/></con:property><con:property><con:name>platform</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ea88f0b1-6e9f-4d7f-ae83-720ffd0fe580"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>appkey</con:name><con:sourceType>appkey</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>appkey</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>sign</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ts</con:name><con:sourceType>ts</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>ts</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>userid</con:name><con:sourceType>userid</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>userid</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>pwd</con:name><con:sourceType>pwd</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>pwd</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>mode</con:name><con:sourceType>mode</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>mode</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>captcha</con:name><con:sourceType>captcha</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>captcha</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>app_subid</con:name><con:sourceType>app_subid</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>app_subid</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>permission</con:name><con:sourceType>permission</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>permission</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>type</con:name><con:sourceType>type</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>type</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>callback</con:name><con:sourceType>callback</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>callback</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>access_key</con:name><con:sourceType>access_key</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>access_key</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>platform</con:name><con:sourceType>platform</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>platform</con:targetType><con:targetStep>login</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="login" id="ff827ef2-e2da-4270-ba2b-74bb9ff2b8e8"><con:settings/><con:config service="https://passport.bilibili.com" resourcePath="/api/login/v2" methodName="login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="login" id="99eaf0e6-e1d0-40e0-9f4b-58cb63c8930e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://passport.bilibili.com</con:endpoint><con:request/><con:originalUri>https://account.bilibili.com/api/login/v2</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="sign" value="fb215ead0d5251c62aa29ffb04d36d1a"/>
  <con:entry key="pwd" value="iqi7cT4CIVhj0LsY5eyDdU0RQP+5RqcADECc5xw5Ss7d+UnTKhW40kzaZXXLM8odVAIK6x5RFVdK AxlDX1jPebhk58CmidB8sqcYaenEmwnlLykMysP+9Wa5i6zfLZAMThoYQ1klJHoLLzghL5w4aWnV KHvTJ6Yqj7g67KMCNwM= "/>
  <con:entry key="ts" value="1473969343"/>
  <con:entry key="appkey" value="7d9f6f6fe2a898e8"/>
  <con:entry key="userid" value="18516254259"/>
</con:parameters><con:parameterOrder><con:entry>userid</con:entry><con:entry>mode</con:entry><con:entry>captcha</con:entry><con:entry>pwd</con:entry><con:entry>app_subid</con:entry><con:entry>permission</con:entry><con:entry>appkey</con:entry><con:entry>sign</con:entry><con:entry>type</con:entry><con:entry>ts</con:entry><con:entry>callback</con:entry><con:entry>access_key</con:entry><con:entry>platform</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>4f2428b4-02f1-42f8-8c59-d70271e44ed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0458f4bc-7335-4593-acce-925baaaf099f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getkey" searchProperties="true"><con:settings/><con:testStep type="groovy" name="tssign" id="6ac117ca-bd2f-4f24-880f-c2444c30f650"><con:settings/><con:config><script>import java.util.*
import java.security.MessageDigest
import java.net.URLEncoder

//计算时间戳
Date date = new Date()
def st_string = date.getTime()
st_string = st_string.toString()
st_string = st_string.substring(0,10)
//设置ts的时间戳 预先写入供后面的调用
testRunner.testCase.testSteps["testdata"].setPropertyValue('ts',st_string)

//===========================需要手工参与的地方=======================================
//1.设置data_list

//设置预读取的testdata里除sign以外的参数名字，用于计算md5
def data_list = ['ts','appkey']
//def data_list = ['ts','appkey']
//测试专用的appkey
def appkey_str = '7d9f6f6fe2a898e8'
//测试专用appkey对应的appsecret
def appsecret_str = '4de2ccdbd9db69be0c2c6437bfe6eb69'

//修改list按字母排序
data_list = data_list.sort()

def n = 0
def sg_orgin_string = ''
def sg_md5_string = ''

while (n&lt;data_list.size()){
	def getLocalPropValue = ''
	if(data_list[n] == 'appkey'){
		sg_orgin_string = sg_orgin_string + data_list[n] + '=' + java.net.URLEncoder.encode(appkey_str,'UTF-8') + '&amp;' 
	}else if(n == (data_list.size-1)){
		getLocalPropValue = testRunner.testCase.testSteps["testdata"].getPropertyValue(data_list[n])
		sg_orgin_string = sg_orgin_string + data_list[n] + '=' + java.net.URLEncoder.encode(getLocalPropValue,'UTF-8')
	}else{
		getLocalPropValue = testRunner.testCase.testSteps["testdata"].getPropertyValue(data_list[n])
		sg_orgin_string = sg_orgin_string + data_list[n] + '=' + java.net.URLEncoder.encode(getLocalPropValue,'UTF-8') + '&amp;'
	}
	n = n + 1
}

sg_orgin_string =  sg_orgin_string + appsecret_str
log.info(sg_orgin_string)
sg_md5_string = getMD5(sg_orgin_string)
log.info (sg_md5_string)
//把算出来的sign写入testdata
testRunner.testCase.testSteps["testdata"].setPropertyValue('sign',sg_md5_string)
//设置appkey
testRunner.testCase.testSteps["testdata"].setPropertyValue('appkey',appkey_str)


//get md5
//=============================
def getMD5(String source){
	MessageDigest md5 = MessageDigest.getInstance("MD5")
	md5.update(source.getBytes())
	byte[] digest = md5.digest()
	StringBuffer sb = new StringBuffer()
	digest.eachByte {
		 sb.append(String.format("%02x", it &amp; 0xff)) 
	}
	return sb.toString()
}
</script></con:config></con:testStep><con:testStep type="properties" name="testdata" id="c5313ced-e143-4dc5-ae42-84f443958691"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>appkey</con:name><con:value>7d9f6f6fe2a898e8</con:value></con:property><con:property><con:name>sign</con:name><con:value>e762a00156e3e1f0c5c70e37a06d008b</con:value></con:property><con:property><con:name>ts</con:name><con:value>1473969343</con:value></con:property><con:property><con:name>season_id</con:name><con:value/></con:property><con:property><con:name>type</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="5012a346-04c7-430e-a029-dfb201eb8c68"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>appkey</con:name><con:sourceType>appkey</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>appkey</con:targetType><con:targetStep>getkey</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>ts</con:name><con:sourceType>ts</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>ts</con:targetType><con:targetStep>getkey</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>sign</con:name><con:sourceType>sign</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>sign</con:targetType><con:targetStep>getkey</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>type</con:name><con:sourceType>type</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>type</con:targetType><con:targetStep>getkey</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>season_id</con:name><con:sourceType>season_id</con:sourceType><con:sourceStep>testdata</con:sourceStep><con:targetType>season_id</con:targetType><con:targetStep>getkey</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="getkey" id="73adb887-ce77-46c8-a3b3-276a925ccaa7"><con:settings/><con:config service="https://passport.bilibili.com" resourcePath="/api/login/get_key" methodName="getkey" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getkey" id="e2cb9a0e-7b7e-4ee2-ae86-a2f92f356661" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Cookie" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://passport.bilibili.com</con:endpoint><con:request/><con:originalUri>https://account.bilibili.com/api/login/get_key</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="sign" value="e762a00156e3e1f0c5c70e37a06d008b"/>
  <con:entry key="ts" value="1473969343"/>
  <con:entry key="appkey" value="7d9f6f6fe2a898e8"/>
</con:parameters><con:parameterOrder><con:entry>appkey</con:entry><con:entry>sign</con:entry><con:entry>ts</con:entry><con:entry>season_id</con:entry><con:entry>type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>6ac117ca-bd2f-4f24-880f-c2444c30f650</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="080a1665-b9a6-48c6-ad19-1866b5944bab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cookie" searchProperties="true"><con:settings/><con:testStep type="properties" name="user_cookie" id="cc3636ad-7eb0-4639-aa5a-5c406d012d29"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user001</con:name><con:value>DedeUserID=15663561;DedeUserID__ckMd5=215d9245b74d109f;SESSDATA=f7ae1726%2C1447838173%2C75dfa3b4;_dfcaptcha=a5f6f6425d29132b63dfad61bd91f584;sid=d4lo0f8a	;</con:value></con:property><con:property><con:name>user002</con:name><con:value>DedeUserID=18456254;DedeUserID__ckMd5=3b9b211782a95697;SESSDATA=d2c7ce9b%2C1447917546%2Cf23702f6;</con:value></con:property><con:property><con:name>user_super001</con:name><con:value>DedeUserID=5746800; DedeUserID__ckMd5=7ee132bc92fc7305; SESSDATA=c0dcae73%2C1445863602%2C60b6d178;</con:value></con:property><con:property><con:name>teardown</con:name><con:value/></con:property><con:property><con:name>user005</con:name><con:value>DedeUserID=17191256; DedeUserID__ckMd5=3584ad65e4e5417e; SESSDATA=dfee6279%2C1447842876%2C0c5974c6;_dfcaptcha=08de96f86edbed0f600fe5d20536ec84;sid=le4i1bqk;</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="access_key" id="b85afcaf-a0e8-4ddd-b9d6-0d1ed4ce325d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>access001</con:name><con:value>access_key=cc98358c7cf3a8da570f0bc26ed325ff</con:value></con:property></con:properties></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="e3608ad1-a993-416c-a8e4-d34a5cc49415" name="get_access_key"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8fdc719e-735b-426e-b73c-12f7fb59848d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="get_access_key" searchProperties="true"><con:settings/><con:testStep type="groovy" name="process" id="c4ea4152-70d9-4d83-9a7c-9fc9b17eb3db"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToObjectMap
import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport
import org.apache.http.impl.cookie.BasicClientCookie
import com.eviware.soapui.support.types.StringToStringMap
import rsa.App;

def params_list1 = ['userid=18516254259','pwd=111111']
//调用的case
def testcase_name1 = 'loginv2'
def teststep_name1 = 'login'

//执行用例
def re = getContentOut(testcase_name1,teststep_name1,params_list1)
log.info(re)
//校验返回值
assert(re.code == 0)
log.info('access_key：'+re.access_key)
//==================================
//SendMsg_ByName 根据用户昵称发送消息或者获取聊天roomid
//输入参 username  用户的昵称如“格格”
//输入参 choice 选择项 若为a则返回rid，若为bs则直 接对用户发送私信, c 返回mid
//输入参 msg_str 私信内容
//u_name 使用的用户在cookies预设的name
//返回值 为rid
//==================================
def SendMsg_ByName(String username,String choice,String msg_str,String u_name){
	params_list_contact = ['page_size=20','page_no=1']
	testcase_name_contact = 'msg_querycontact'
	teststep_name_contact = 'querycontact'
	setCookies(testcase_name_contact,teststep_name_contact ,u_name)
	setaptcha(u_name,params_list_contact)
	
	def re_contact = getContentOut(testcase_name_contact,teststep_name_contact,params_list_contact)
	
	def user_size = re_contact.data.size
	def user_id = 0
	for (i in (0..(user_size - 1))){
		if (re_contact.data[i].uname == username){
			user_id = i
			break
			}
		
		if(i == user_size -1){
			assert(  '未在联系人列表中找到对应的用户')
			}
		}

		if(choice == 'c'){
			return re_contact.data[user_id].mid
		}

		//根据mid获取roomid
		params_list_double = ['mid=' + re_contact.data[user_id].mid]
		testcase_name_double = 'msg_querydouble'
		teststep_name_double = 'querydouble'
		log.info params_list_double
		setCookies(testcase_name_double,teststep_name_double ,u_name)
		setaptcha(u_name,params_list_double)
		
		def re_queryroom = getContentOut(testcase_name_double,teststep_name_double,params_list_double)

		if(choice == 'a'){
			return re_queryroom.data.rid
		}
		else{
			log.info 'send msg'
			params_list_send = ['rid=' + re_queryroom.data.rid,'msg=' + msg_str]
			setCookies('msg_send','send',u_name)
			setaptcha(u_name,params_list_send)
			def re_sendmsg = getContentOut('msg_send','send',params_list_send)
			return re_sendmsg
		}
}




//==================封装公共调用函数==============================

//==================================
//getContentOut 模拟请求
//输入参 testcase_name  testcase在testsuite中的名字
//输入参 teststep_name  主teststep在testcase中的名字
//输入参 request_params list的形式设置准备请求参数 eg： ['oid=1','type=1','message=233333']
//返回值为该请求获取的返回正文content
//==================================
def getContentOut(String testcase_name,String teststep_name,List request_params){
	//照对应的case
	def testproject = testRunner.testCase.testSuite.project
	def testcase = testproject.testSuites['common_testsuite'].testCases[testcase_name]
	
	for(i in request_params){
		testcase.testSteps['testdata'].setPropertyValue(i.split('=')[0],i.split('=')[1])
	}

	def contextMap = new StringToObjectMap(context)
	def runner = testcase.run(contextMap,false)
	//获取测试的请求
	def testcase_stepcount = testcase.getTestStepCount() 
	def response_content = runner.getResults()[testcase_stepcount-1].getResponseContent()
	log.info response_content
     //还原设置参数
	tearDownInput(testcase_name,request_params)

	//还原cookie设置
	setCookies(testcase_name, teststep_name,'teardown')

     //把测试结果json化后传出去
	def slurper = new JsonSlurper()
	def re = slurper.parseText(response_content)
	
	return re
}

//====================================
//tearDownInput 还原参数设置
//输入参 testcase_name  testcase在testsuite中的名字
//输入参 request_params list的形式设置准备请求参数 eg： ['oid=1','type=1','message=233333']
//返回值 无
//====================================
def tearDownInput(String testcase_name,List request_params){
	for(i in request_params){
		testRunner.testCase.testSuite.project.testSuites['common_testsuite'].testCases[testcase_name].testSteps['testdata'].setPropertyValue(i.split('=')[0],'')
		}
}

//====================================
//setCookies 设置cookies
//输入参 testcase_name  testcase在testsuite中的名字
//输入参 teststep_name  需要写入cookie的请求所在teststep名字
//输入参 userid 固定账号1 user001    账号2user002   高权限账号user_super001  还原操作 teardown
//返回值 无
//====================================
def setCookies(String testcase_name,String teststep_name,String userid){
	//按用户名读取预置的cookie值
	def testproject = testRunner.testCase.testSuite.project
	def cookies_str = testproject.testSuites['common_testsuite'].testCases['cookie'].testSteps['user_cookie'].getPropertyValue(userid)
	def reqheaders = new StringToStringMap()
	reqheaders.put('Cookie',cookies_str)
	testproject.testSuites['common_testsuite'].getTestCaseByName(testcase_name).getTestStepByName(teststep_name).testRequest.setRequestHeaders(reqheaders)	
}

//====================================
//getCaptcha 设置Captcha
//输入参 testcase_name  testcase在testsuite中的名字
//输入参 teststep_name  需要写入cookie的请求所在teststep名字
//输入参 userid 固定账号1 user001    账号2user002   高权限账号user_super001 
//返回值 无
//====================================
//====================================
def setaptcha(String userid,List prams_list){
	//按用户名读取预置的cookie值
	def testproject = testRunner.testCase.testSuite.project
	def cookies_str = testproject.testSuites['common_testsuite'].testCases['cookie'].testSteps['user_cookie'].getPropertyValue(userid)
	
	def values = cookies_str.split(';')
	
	for(i in (0..(values.size()-1))){
		if(values[i].split('=')[0] == '_dfcaptcha') {
			prams_list.add('captcha=' + values[i].split('=')[1])
			return prams_list
		}
	}
	
}

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>c4ea4152-70d9-4d83-9a7c-9fc9b17eb3db</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="76a672ce-c27e-4a57-b764-08326bf6990e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="common_script" searchProperties="true"><con:settings/><con:testStep type="groovy" name="common_script" id="0e2fa931-ec51-46f4-acc4-d326334a83d5"><con:settings/><con:config><script>// 第二版

for(teststep in teststep_loop()){
	log.info teststep.getPropertyValue('Endpoint') + '——+——+——+——+——+——+——+——+——+——+'
}
def teststep_loop(){
	teststep_list = []
	for (testsuite in testRunner.testCase.testSuite.project.getTestSuiteList()){
		if (testsuite.getName() == 'common_testsuite'){
			for (testcase in testsuite.getTestCaseList()){
				for ( teststep in testcase.getTestStepList()){
					if (teststep.getConfig().type == 'restrequest'){
						teststep_list.add(teststep)
					}
				}
			}
		}
	}
	return teststep_list
}

//https://passport.bilibili.com</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>